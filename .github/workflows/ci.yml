name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build all services
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build services
        run: |
          cd core && mvn clean install -DskipTests && cd ..
          for d in GatewayService AuctionService UserService BidService InvitationService ItemService NotificationService SecurityService; do
            cd $d && mvn clean package -DskipTests && cd ..
          done

      - name: Upload JARs
        uses: actions/upload-artifact@v4
        with:
          name: jars
          path: |
            **/target/*.jar

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Run unit tests
        run: |
          cd core && mvn install -DskipTests && cd ..
          cd UserService && mvn test

  service-tests:
    name: Run service-level integration tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Run service tests
        run: |
          cd core && mvn install -DskipTests && cd ..
          cd AuctionService && mvn verify -Dtest=*ServiceTest && cd ..
          cd BidService && mvn verify -Dtest=*ServiceTest && cd ..
          cd InvitationService && mvn verify -Dtest=*ServiceTest && cd ..
          cd NotificationService && mvn verify -Dtest=*ServiceTest && cd ..
          cd UserService && mvn verify -Dtest=*ServiceTest && cd ..
  

  api-tests:
    name: Run API tests with docker-compose
    runs-on: ubuntu-latest
    needs: build

    env:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test

    services:
      docker:
        image: docker:20.10.16-dind
        options: --privileged

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          curl -SL https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

      - name: Download JARs
        uses: actions/download-artifact@v4
        with:
          name: jars
          path: .

      - name: Show JARs
        run: ls -R

      - name: Start services with docker-compose
        run: |
          docker-compose -f docker-compose.yaml build 
          docker-compose -f docker-compose.yaml up -d
          sleep 100

      - name: Run API tests
        run: |
          export TZ=Asia/Jerusalem
          docker ps -a
          docker compose -f ./docker-compose.yaml ps
          docker logs kafka || true
          docker logs auction-zookeeper-1 || true
          docker-compose logs auctionservice
          cd core && mvn clean install -DskipTests && cd ..
          cd AuctionService && mvn verify -Dtest=*HandlerTest && cd ..
          cd BidService && mvn verify -Dtest=*HandlerTest && cd ..
          cd NotificationService && mvn verify -Dtest=*HandlerTest && cd ..
          cd SecurityService && mvn verify -Dtest=*HandlerTest && cd ..
          cd ItemService && mvn verify -Dtest=*HandlerTest && cd ..

      - name: Stop services
        if: always()
        run: docker-compose down
